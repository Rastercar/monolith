#
# Docker compose file for running the monolith dependencies
# databases, rabbitmq, jaeger, etc in docker containers.
#

volumes:
  postgres:

services:
  # development database
  postgres:
    image: timescale/timescaledb-ha:pg14-latest
    container_name: rastercar-db
    environment:
      POSTGRES_DB: raster_dev
      POSTGRES_USER: raster_user
      POSTGRES_PASSWORD: raster_pass
    ports:
      - '5432:5432'
    privileged: true
    volumes:
      - postgres:/var/lib/postgresql/data

  # testing database
  postgrestest:
    image: timescale/timescaledb-ha:pg14-latest
    container_name: rastercar-db-test
    environment:
      PGDATA: /var/lib/postgresql/data
      POSTGRES_DB: raster_test
      POSTGRES_USER: raster_user
      POSTGRES_PASSWORD: raster_pass
    ports:
      - '5435:5432'
    privileged: true
    tmpfs:
      # run as uid:1000 gid:1000 (your user) so docker can
      # write to tempfs, otherwise we get a permission error
      - /var/lib/postgresql/data:uid=1000,gid=1000

  rabbitmq:
    container_name: rastercar-rmq
    image: rabbitmq:3.10.1-management
    ports:
      - 5672:5672
      - 15672:15672

  # see: https://www.jaegertracing.io/docs/2.0/getting-started/
  jaeger:
    container_name: rastercar-jaeger
    image: 'jaegertracing/jaeger:2.2.0'
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - '5778:5778' # Configuration
      - '16686:16686' # Query UI
      - '4317:4317' # OTLP gRPC
      - '4318:4318' # OTLP HTTP
      - '14250:14250' # gRPC for collector
      - '14268:14268' # HTTP for collector
      - '9411:9411' # Zipkin
    command:
      - --set
      - receivers.otlp.protocols.http.endpoint=0.0.0.0:4318
      - --set
      - receivers.otlp.protocols.grpc.endpoint=0.0.0.0:4317
