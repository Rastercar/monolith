/* eslint-disable */
/**
 * This file was generated by 'vite-plugin-kit-routes'
 *
 *      >> DO NOT EDIT THIS FILE MANUALLY <<
 */

/**
 * PAGES
 */
const PAGES = {
  "/auth/change-password": `/auth/change-password`,
  "/auth/confirm-email-address": `/auth/confirm-email-address`,
  "/auth/recover-password": `/auth/recover-password`,
  "/auth/sign-in": (params?: { redirect?: (string) }) => {
    return `/auth/sign-in${appendSp({ 'redirect': params?.['redirect'] })}`
  },
  "/auth/sign-out": `/auth/sign-out`,
  "/auth/sign-up": `/auth/sign-up`,
  "/client": `/client`,
  "/client/access-levels": `/client/access-levels`,
  "/client/access-levels/[access_level_id=integer]": (params: { access_level_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/access-levels/${params['access_level_id']}`
  },
  "/client/access-levels/new": `/client/access-levels/new`,
  "/client/my-profile": `/client/my-profile`,
  "/client/settings/organization": `/client/settings/organization`,
  "/client/settings/profile": `/client/settings/profile`,
  "/client/settings/security": (params?: { redirectHereDueToForcePasswordChange?: (boolean) }) => {
    return `/client/settings/security${appendSp({ 'redirectHereDueToForcePasswordChange': params?.['redirectHereDueToForcePasswordChange'] })}`
  },
  "/client/settings/sessions": `/client/settings/sessions`,
  "/client/tracking/map": (params?: { lookupTracker?: (number) }) => {
    return `/client/tracking/map${appendSp({ 'lookupTracker': params?.['lookupTracker'] })}`
  },
  "/client/tracking/sim-cards": `/client/tracking/sim-cards`,
  "/client/tracking/sim-cards/[sim_card_id=integer]": (params: { sim_card_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/tracking/sim-cards/${params['sim_card_id']}`
  },
  "/client/tracking/sim-cards/new": `/client/tracking/sim-cards/new`,
  "/client/tracking/trackers": `/client/tracking/trackers`,
  "/client/tracking/trackers/[tracker_id=integer]": (params: { tracker_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/tracking/trackers/${params['tracker_id']}`
  },
  "/client/tracking/trackers/new": `/client/tracking/trackers/new`,
  "/client/tracking/vehicles": `/client/tracking/vehicles`,
  "/client/tracking/vehicles/[vehicle_id=integer]": (params: { vehicle_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/tracking/vehicles/${params['vehicle_id']}`
  },
  "/client/tracking/vehicles/new": `/client/tracking/vehicles/new`,
  "/client/users": `/client/users`,
  "/client/users/[user_id=integer]": (params: { user_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/users/${params['user_id']}`
  },
  "/client/users/new": `/client/users/new`
}

/**
 * SERVERS
 */
const SERVERS = {
  "POST /auth/confirm-email-address": `/auth/confirm-email-address`,
  "POST /auth/request-email-confirmation": `/auth/request-email-confirmation`,
  "POST /auth/sign-out": `/auth/sign-out`,
  "DELETE /auth/sign-out/[session_id=integer]": (params: { session_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/auth/sign-out/${params['session_id']}`
  },
  "GET /client/access-levels": `/client/access-levels`,
  "DELETE /client/access-levels/[access_level_id=integer]": (params: { access_level_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/access-levels/${params['access_level_id']}`
  },
  "PUT /client/settings/profile/picture": `/client/settings/profile/picture`,
  "DELETE /client/settings/profile/picture": `/client/settings/profile/picture`,
  "GET /client/tracking/sim-cards": `/client/tracking/sim-cards`,
  "DELETE /client/tracking/sim-cards/[sim_card_id=integer]": (params: { sim_card_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/tracking/sim-cards/${params['sim_card_id']}`
  },
  "PUT /client/tracking/sim-cards/[sim_card_id=integer]": (params: { sim_card_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/tracking/sim-cards/${params['sim_card_id']}`
  },
  "GET /client/tracking/trackers": `/client/tracking/trackers`,
  "DELETE /client/tracking/trackers/[tracker_id=integer]": (params: { tracker_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/tracking/trackers/${params['tracker_id']}`
  },
  "PUT /client/tracking/trackers/[tracker_id=integer]": (params: { tracker_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/tracking/trackers/${params['tracker_id']}`
  },
  "GET /client/tracking/trackers/[tracker_id=integer]/last-location": (params: { tracker_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/tracking/trackers/${params['tracker_id']}/last-location`
  },
  "GET /client/tracking/trackers/[tracker_id=integer]/locations": (params: { tracker_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/tracking/trackers/${params['tracker_id']}/locations`
  },
  "POST /client/tracking/trackers/positions": `/client/tracking/trackers/positions`,
  "GET /client/tracking/vehicles": `/client/tracking/vehicles`,
  "DELETE /client/tracking/vehicles/[vehicle_id=integer]": (params: { vehicle_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/tracking/vehicles/${params['vehicle_id']}`
  },
  "GET /client/tracking/vehicles/[vehicle_id=integer]": (params: { vehicle_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/tracking/vehicles/${params['vehicle_id']}`
  },
  "PUT /client/tracking/vehicles/[vehicle_id=integer]/photo": (params: { vehicle_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/tracking/vehicles/${params['vehicle_id']}/photo`
  },
  "DELETE /client/tracking/vehicles/[vehicle_id=integer]/photo": (params: { vehicle_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/tracking/vehicles/${params['vehicle_id']}/photo`
  },
  "GET /client/users": `/client/users`,
  "DELETE /client/users/[user_id=integer]": (params: { user_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/users/${params['user_id']}`
  },
  "PUT /client/users/[user_id=integer]/access-level": (params: { user_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/users/${params['user_id']}/access-level`
  },
  "POST /client/users/[user_id=integer]/block": (params: { user_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/users/${params['user_id']}/block`
  },
  "DELETE /client/users/[user_id=integer]/sessions/[session_id=integer]": (params: { user_id: (ExtractParamType<typeof import('../params/integer.ts').match>), session_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/users/${params['user_id']}/sessions/${params['session_id']}`
  },
  "POST /client/users/[user_id=integer]/unblock": (params: { user_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/users/${params['user_id']}/unblock`
  },
  "GET /healthcheck": `/healthcheck`
}

/**
 * ACTIONS
 */
const ACTIONS = {
  "changePassword /auth/change-password": `/auth/change-password?/changePassword`,
  "recoverPassword /auth/recover-password": `/auth/recover-password?/recoverPassword`,
  "signIn /auth/sign-in": `/auth/sign-in?/signIn`,
  "signUp /auth/sign-up": `/auth/sign-up?/signUp`,
  "updateAccessLevel /client/access-levels/[access_level_id=integer]": (params: { access_level_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/access-levels/${params['access_level_id']}?/updateAccessLevel`
  },
  "createAccessLevel /client/access-levels/new": `/client/access-levels/new?/createAccessLevel`,
  "updateOrganization /client/settings/organization": `/client/settings/organization?/updateOrganization`,
  "updateProfile /client/settings/profile": `/client/settings/profile?/updateProfile`,
  "updateProfilePicture /client/settings/profile": `/client/settings/profile?/updateProfilePicture`,
  "changePassword /client/settings/security": `/client/settings/security?/changePassword`,
  "updateSimCard /client/tracking/sim-cards/[sim_card_id=integer]": (params: { sim_card_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/tracking/sim-cards/${params['sim_card_id']}?/updateSimCard`
  },
  "createSimCard /client/tracking/sim-cards/new": `/client/tracking/sim-cards/new?/createSimCard`,
  "updateTracker /client/tracking/trackers/[tracker_id=integer]": (params: { tracker_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/tracking/trackers/${params['tracker_id']}?/updateTracker`
  },
  "createTracker /client/tracking/trackers/new": `/client/tracking/trackers/new?/createTracker`,
  "updateVehicle /client/tracking/vehicles/[vehicle_id=integer]": (params: { vehicle_id: (ExtractParamType<typeof import('../params/integer.ts').match>) }) => {
    return `/client/tracking/vehicles/${params['vehicle_id']}?/updateVehicle`
  },
  "createVehicle /client/tracking/vehicles/new": `/client/tracking/vehicles/new?/createVehicle`,
  "createUser /client/users/new": `/client/users/new?/createUser`
}

/**
 * LINKS
 */
const LINKS = {
  
}

type ParamValue = string | number | undefined

/**
 * Append search params to a string
 */
export const appendSp = (
  sp?: Record<string, ParamValue | ParamValue[]>,
  prefix: '?' | '&' = '?',
) => {
  if (sp === undefined) return ''

  const params = new URLSearchParams()
  const append = (n: string, v: ParamValue) => {
    if (v !== undefined) {
      params.append(n, String(v))
    }
  }

  let anchor = ''
  for (const [name, val] of Object.entries(sp)) {
    if (name === '__KIT_ROUTES_ANCHOR__' && val !== undefined) {
      anchor = `#${val}`
      continue
    }
    if (Array.isArray(val)) {
      for (const v of val) {
        append(name, v)
      }
    } else {
      append(name, val)
    }
  }

  const formatted = params.toString()
  if (formatted || anchor) {
    return `${prefix}${formatted}${anchor}`.replace('?#', '#')
  }
  return ''
}

/**
 * get the current search params
 * 
 * Could be use like this:
 * ```
 * route("/cities", { page: 2 }, { ...currentSP() })
 * ```
 */ 
export const currentSp = () => {
  const params = new URLSearchParams(window.location.search)
  const record: Record<string, string> = {}
  for (const [key, value] of params.entries()) {
    record[key] = value
  }
  return record
}

/* type helpers for route function */
type NonFunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T]
type FunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T]
type FunctionParams<T> = T extends (...args: infer P) => any ? P : never

const AllObjs = { ...PAGES, ...ACTIONS, ...SERVERS, ...LINKS }
type AllTypes = typeof AllObjs

export type Routes = keyof AllTypes extends `${string}/${infer Route}` ? `/${Route}` : keyof AllTypes
export const routes = [
	...new Set(Object.keys(AllObjs).map((route) => /^\/.*|[^ ]?\/.*$/.exec(route)?.[0] ?? route)),
] as Routes[]

/**
 * To be used like this: 
 * ```ts
 * import { route } from './ROUTES'
 * 
 * route('site_id', { id: 1 })
 * ```
 */
export function route<T extends FunctionKeys<AllTypes>>(key: T, ...params: FunctionParams<AllTypes[T]>): string
export function route<T extends NonFunctionKeys<AllTypes>>(key: T): string
export function route<T extends keyof AllTypes>(key: T, ...params: any[]): string {
  if (AllObjs[key] as any instanceof Function) {
    const element = (AllObjs as any)[key] as (...args: any[]) => string
    return element(...params)
  } else {
    return AllObjs[key] as string
  }
}

/* type helpers param & predicate */
type ExtractFnPredicate<T> = T extends (param: any) => param is infer U ? U : never;
type ExtractParamType<T extends (param: any) => any> = ExtractFnPredicate<T> extends never ? Parameters<T>[0] : ExtractFnPredicate<T>

/**
* Add this type as a generic of the vite plugin `kitRoutes<KIT_ROUTES>`.
*
* Full example:
* ```ts
* import type { KIT_ROUTES } from '$lib/ROUTES'
* import { kitRoutes } from 'vite-plugin-kit-routes'
*
* kitRoutes<KIT_ROUTES>({
*  PAGES: {
*    // here, key of object will be typed!
*  }
* })
* ```
*/
export type KIT_ROUTES = {
  PAGES: { '/auth/change-password': never, '/auth/confirm-email-address': never, '/auth/recover-password': never, '/auth/sign-in': never, '/auth/sign-out': never, '/auth/sign-up': never, '/client': never, '/client/access-levels': never, '/client/access-levels/[access_level_id=integer]': 'access_level_id', '/client/access-levels/new': never, '/client/my-profile': never, '/client/settings/organization': never, '/client/settings/profile': never, '/client/settings/security': never, '/client/settings/sessions': never, '/client/tracking/map': never, '/client/tracking/sim-cards': never, '/client/tracking/sim-cards/[sim_card_id=integer]': 'sim_card_id', '/client/tracking/sim-cards/new': never, '/client/tracking/trackers': never, '/client/tracking/trackers/[tracker_id=integer]': 'tracker_id', '/client/tracking/trackers/new': never, '/client/tracking/vehicles': never, '/client/tracking/vehicles/[vehicle_id=integer]': 'vehicle_id', '/client/tracking/vehicles/new': never, '/client/users': never, '/client/users/[user_id=integer]': 'user_id', '/client/users/new': never }
  SERVERS: { 'POST /auth/confirm-email-address': never, 'POST /auth/request-email-confirmation': never, 'POST /auth/sign-out': never, 'DELETE /auth/sign-out/[session_id=integer]': 'session_id', 'GET /client/access-levels': never, 'DELETE /client/access-levels/[access_level_id=integer]': 'access_level_id', 'PUT /client/settings/profile/picture': never, 'DELETE /client/settings/profile/picture': never, 'GET /client/tracking/sim-cards': never, 'DELETE /client/tracking/sim-cards/[sim_card_id=integer]': 'sim_card_id', 'PUT /client/tracking/sim-cards/[sim_card_id=integer]': 'sim_card_id', 'GET /client/tracking/trackers': never, 'DELETE /client/tracking/trackers/[tracker_id=integer]': 'tracker_id', 'PUT /client/tracking/trackers/[tracker_id=integer]': 'tracker_id', 'GET /client/tracking/trackers/[tracker_id=integer]/last-location': 'tracker_id', 'GET /client/tracking/trackers/[tracker_id=integer]/locations': 'tracker_id', 'POST /client/tracking/trackers/positions': never, 'GET /client/tracking/vehicles': never, 'DELETE /client/tracking/vehicles/[vehicle_id=integer]': 'vehicle_id', 'GET /client/tracking/vehicles/[vehicle_id=integer]': 'vehicle_id', 'PUT /client/tracking/vehicles/[vehicle_id=integer]/photo': 'vehicle_id', 'DELETE /client/tracking/vehicles/[vehicle_id=integer]/photo': 'vehicle_id', 'GET /client/users': never, 'DELETE /client/users/[user_id=integer]': 'user_id', 'PUT /client/users/[user_id=integer]/access-level': 'user_id', 'POST /client/users/[user_id=integer]/block': 'user_id', 'DELETE /client/users/[user_id=integer]/sessions/[session_id=integer]': 'user_id' | 'session_id', 'POST /client/users/[user_id=integer]/unblock': 'user_id', 'GET /healthcheck': never }
  ACTIONS: { 'changePassword /auth/change-password': never, 'recoverPassword /auth/recover-password': never, 'signIn /auth/sign-in': never, 'signUp /auth/sign-up': never, 'updateAccessLevel /client/access-levels/[access_level_id=integer]': 'access_level_id', 'createAccessLevel /client/access-levels/new': never, 'updateOrganization /client/settings/organization': never, 'updateProfile /client/settings/profile': never, 'updateProfilePicture /client/settings/profile': never, 'changePassword /client/settings/security': never, 'updateSimCard /client/tracking/sim-cards/[sim_card_id=integer]': 'sim_card_id', 'createSimCard /client/tracking/sim-cards/new': never, 'updateTracker /client/tracking/trackers/[tracker_id=integer]': 'tracker_id', 'createTracker /client/tracking/trackers/new': never, 'updateVehicle /client/tracking/vehicles/[vehicle_id=integer]': 'vehicle_id', 'createVehicle /client/tracking/vehicles/new': never, 'createUser /client/users/new': never }
  LINKS: Record<string, never>
  Params: { 'redirect': never, 'access_level_id': never, 'redirectHereDueToForcePasswordChange': never, 'lookupTracker': never, 'sim_card_id': never, 'tracker_id': never, 'vehicle_id': never, 'user_id': never, 'session_id': never }
}
