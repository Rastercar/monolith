/* eslint-disable */
/**
 * This file was generated by 'vite-plugin-kit-routes'
 *
 *      >> DO NOT EDIT THIS FILE MANUALLY <<
 */

/**
 * PAGES
 */
const PAGES = {
  "/auth/change-password": `/auth/change-password`,
  "/auth/confirm-email-address": `/auth/confirm-email-address`,
  "/auth/recover-password": `/auth/recover-password`,
  "/auth/sign-in": (params?: { redirect?: (string) }) => {
    return `/auth/sign-in${appendSp({ redirect: params?.redirect })}`
  },
  "/auth/sign-out": `/auth/sign-out`,
  "/auth/sign-up": `/auth/sign-up`,
  "/client": `/client`,
  "/client/access-levels": `/client/access-levels`,
  "/client/access-levels/[access_level_id]": (params: { access_level_id: (string | number) }) => {
    return `/client/access-levels/${params.access_level_id}`
  },
  "/client/access-levels/new": `/client/access-levels/new`,
  "/client/my-profile": `/client/my-profile`,
  "/client/settings/organization": `/client/settings/organization`,
  "/client/settings/profile": `/client/settings/profile`,
  "/client/settings/security": `/client/settings/security`,
  "/client/settings/sessions": `/client/settings/sessions`,
  "/client/tracking/map": `/client/tracking/map`,
  "/client/tracking/quick-track": `/client/tracking/quick-track`,
  "/client/tracking/sim-cards": `/client/tracking/sim-cards`,
  "/client/tracking/sim-cards/[sim_card_id]": (params: { sim_card_id: (string | number) }) => {
    return `/client/tracking/sim-cards/${params.sim_card_id}`
  },
  "/client/tracking/sim-cards/new": `/client/tracking/sim-cards/new`,
  "/client/tracking/trackers": `/client/tracking/trackers`,
  "/client/tracking/trackers/[tracker_id]": (params: { tracker_id: (string | number) }) => {
    return `/client/tracking/trackers/${params.tracker_id}`
  },
  "/client/tracking/trackers/new": `/client/tracking/trackers/new`,
  "/client/tracking/vehicles": `/client/tracking/vehicles`,
  "/client/tracking/vehicles/[vehicle_id]": (params: { vehicle_id: (string | number) }) => {
    return `/client/tracking/vehicles/${params.vehicle_id}`
  },
  "/client/tracking/vehicles/new": `/client/tracking/vehicles/new`,
  "/client/users": `/client/users`,
  "/client/users/[user_id]": (params: { user_id: (string | number) }) => {
    return `/client/users/${params.user_id}`
  },
  "/client/users/new": `/client/users/new`
}

/**
 * SERVERS
 */
const SERVERS = {
  "POST /auth/confirm-email-address": `/auth/confirm-email-address`,
  "POST /auth/sign-out": `/auth/sign-out`
}

/**
 * ACTIONS
 */
const ACTIONS = {
  "changePassword /auth/change-password": `/auth/change-password?/changePassword`,
  "recoverPassword /auth/recover-password": `/auth/recover-password?/recoverPassword`,
  "signIn /auth/sign-in": `/auth/sign-in?/signIn`,
  "signUp /auth/sign-up": `/auth/sign-up?/signUp`,
  "updateProfile /client/settings/profile": `/client/settings/profile?/updateProfile`
}

/**
 * LINKS
 */
const LINKS = {
  
}

type ParamValue = string | number | undefined

/**
 * Append search params to a string
 */
export const appendSp = (sp?: Record<string, ParamValue | ParamValue[]>, prefix: '?' | '&' = '?') => {
  if (sp === undefined) return ''

  const params = new URLSearchParams()
  const append = (n: string, v: ParamValue) => {
    if (v !== undefined) {
      params.append(n, String(v))
    }
  }

  for (const [name, val] of Object.entries(sp)) {
    if (Array.isArray(val)) {
      for (const v of val) {
        append(name, v)
      }
    } else {
      append(name, val)
    }
  }

  const formatted = params.toString()
  if (formatted) {
    return `${prefix}${formatted}`
  }
  return ''
}

/**
 * get the current search params
 * 
 * Could be use like this:
 * ```
 * route("/cities", { page: 2 }, { ...currentSP() })
 * ```
 */ 
export const currentSp = () => {
  const params = new URLSearchParams(window.location.search)
  const record: Record<string, string> = {}
  for (const [key, value] of params.entries()) {
    record[key] = value
  }
  return record
}

// route function helpers
type NonFunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T]
type FunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T]
type FunctionParams<T> = T extends (...args: infer P) => any ? P : never

const AllObjs = { ...PAGES, ...ACTIONS, ...SERVERS, ...LINKS }
type AllTypes = typeof AllObjs

export type Routes = keyof AllTypes extends `${string}/${infer Route}` ? `/${Route}` : keyof AllTypes
export const routes = [
	...new Set(Object.keys(AllObjs).map((route) => /^\/.*|[^ ]?\/.*$/.exec(route)?.[0] ?? route)),
] as Routes[]

/**
 * To be used like this: 
 * ```ts
 * import { route } from './ROUTES'
 * 
 * route('site_id', { id: 1 })
 * ```
 */
export function route<T extends FunctionKeys<AllTypes>>(key: T, ...params: FunctionParams<AllTypes[T]>): string
export function route<T extends NonFunctionKeys<AllTypes>>(key: T): string
export function route<T extends keyof AllTypes>(key: T, ...params: any[]): string {
  if (AllObjs[key] as any instanceof Function) {
    const element = (AllObjs as any)[key] as (...args: any[]) => string
    return element(...params)
  } else {
    return AllObjs[key] as string
  }
}

/**
* Add this type as a generic of the vite plugin `kitRoutes<KIT_ROUTES>`.
*
* Full example:
* ```ts
* import type { KIT_ROUTES } from './ROUTES'
* import { kitRoutes } from 'vite-plugin-kit-routes'
*
* kitRoutes<KIT_ROUTES>({
*  PAGES: {
*    // here, key of object will be typed!
*  }
* })
* ```
*/
export type KIT_ROUTES = {
  PAGES: { '/auth/change-password': never, '/auth/confirm-email-address': never, '/auth/recover-password': never, '/auth/sign-in': never, '/auth/sign-out': never, '/auth/sign-up': never, '/client': never, '/client/access-levels': never, '/client/access-levels/[access_level_id]': 'access_level_id', '/client/access-levels/new': never, '/client/my-profile': never, '/client/settings/organization': never, '/client/settings/profile': never, '/client/settings/security': never, '/client/settings/sessions': never, '/client/tracking/map': never, '/client/tracking/quick-track': never, '/client/tracking/sim-cards': never, '/client/tracking/sim-cards/[sim_card_id]': 'sim_card_id', '/client/tracking/sim-cards/new': never, '/client/tracking/trackers': never, '/client/tracking/trackers/[tracker_id]': 'tracker_id', '/client/tracking/trackers/new': never, '/client/tracking/vehicles': never, '/client/tracking/vehicles/[vehicle_id]': 'vehicle_id', '/client/tracking/vehicles/new': never, '/client/users': never, '/client/users/[user_id]': 'user_id', '/client/users/new': never }
  SERVERS: { 'POST /auth/confirm-email-address': never, 'POST /auth/sign-out': never }
  ACTIONS: { 'changePassword /auth/change-password': never, 'recoverPassword /auth/recover-password': never, 'signIn /auth/sign-in': never, 'signUp /auth/sign-up': never, 'updateProfile /client/settings/profile': never }
  LINKS: Record<string, never>
  Params: { redirect: never, access_level_id: never, sim_card_id: never, tracker_id: never, vehicle_id: never, user_id: never }
}
